"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[26794],{26794:(t,n,e)=>{e.d(n,{getNFT:()=>y});var c=e(52086),a=e(15400),r=e(74340);let i=[{type:"uint256",name:"_tokenId"}],o=[{type:"string"}];async function d(t){return(0,r.readContract)({contract:t.contract,method:["0xc87b56dd",i,o],params:[t.tokenId]})}let s=[{type:"uint256",name:"_index"}],l=[{type:"uint256"}];async function u(t){return(0,r.readContract)({contract:t.contract,method:["0x4f6ccce7",s,l],params:[t.index]})}var h=e(4301);async function y(t){let{useIndexer:n=!0}=t;if(n)try{return await w(t)}catch{}return await p(t)}async function w(t){let n=await (0,h.du)({client:t.contract.client,chain:t.contract.chain,contractAddress:t.contract.address,tokenId:t.tokenId,includeOwners:t.includeOwner});return n||p(t)}async function p(t){let n=t.tokenId;if(t.tokenByIndex)try{n=await u({contract:t.contract,index:t.tokenId})}catch{}let[r,i]=await Promise.all([d({contract:t.contract,tokenId:n}).catch(()=>null),t.includeOwner?e.e(46502).then(e.bind(e,46502)).then(e=>e.ownerOf({contract:t.contract,tokenId:n})).catch(()=>null):null]);return r?.trim()?(0,a.parseNFT)(await (0,c.F)({client:t.contract.client,tokenId:n,tokenUri:r}).catch(()=>({id:n,type:"ERC721",uri:r})),{tokenId:n,tokenUri:r,type:"ERC721",owner:i,tokenAddress:t.contract.address,chainId:t.contract.chain.id}):(0,a.parseNFT)({id:n,type:"ERC721",uri:""},{tokenId:n,tokenUri:"",type:"ERC721",owner:i,tokenAddress:t.contract.address,chainId:t.contract.chain.id})}},52086:(t,n,e)=>{e.d(n,{F:()=>r});var c=e(74960),a=e(23471);async function r(t){let{client:n,tokenId:r,tokenUri:i}=t;if(i.startsWith("data:application/json;base64"))try{return JSON.parse(function(t){let[,n]=t.split(",");return(0,c.QM)(n)}(i))}catch(t){throw console.error("Failed to fetch base64 encoded NFT",{tokenId:r,tokenUri:i},t),t}let{download:o}=await Promise.resolve().then(e.bind(e,92628));try{if(!i.includes("{id}"))return await (await o({client:n,uri:i})).json()}catch(t){throw console.error("Failed to fetch non-dynamic NFT",{tokenId:r,tokenUri:i},t),t}try{try{return await (await o({client:n,uri:i.replace("{id}",(0,a.cK)(r,{size:32}).slice(2))})).json()}catch{return await (await o({client:n,uri:i.replace("{id}",r.toString())})).json()}}catch(t){throw console.error("Failed to fetch dynamic NFT",{tokenId:r,tokenUri:i},t),t}}}}]);